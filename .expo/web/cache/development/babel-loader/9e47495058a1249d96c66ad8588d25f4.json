{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\esti-projects\\\\react-native-master\\\\src\\\\containers\\\\App.jsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport MyGetLocation from \"../components/GetLocation\";\nimport ForecastList from \"../components/ForecastList\";\nimport * as Location from 'expo-location';\nimport * as Permissions from 'expo-permissions';\nimport autoBind from 'react-autobind';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nvar iconButtn = React.createElement(Icon.Button, {\n  name: \"refresh\",\n  style: {\n    backgroundColor: \"#80a4e4\"\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 19\n  }\n});\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n\n    _this.getLocationAsync = function _callee() {\n      var _await$Permissions$as, status, location, _location$coords, latitude, longitude, url;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              if (status !== 'granted') {\n                _this.setState({\n                  errorMessage: 'Permission to access location was denied'\n                });\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n                accuracy: Location.Accuracy.Highest\n              }));\n\n            case 7:\n              location = _context.sent;\n              _location$coords = location.coords, latitude = _location$coords.latitude, longitude = _location$coords.longitude;\n              url = 'https://api.openweathermap.org/data/2.5/forecast?lat=' + latitude + '&lon=' + longitude + '&units=metric&appid=34026f1820a73bd0d6e38e6c9931d3e5';\n              fetch(url).then(function (response) {\n                return response.json();\n              }).then(function (data) {\n                _this.setState({\n                  forecast: data,\n                  location: {\n                    lat: latitude,\n                    lng: longitude\n                  },\n                  address: data.city.name\n                });\n\n                console.log(\"222222222222222222222222222222222222\");\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    autoBind(_assertThisInitialized(_this));\n    _this.state = {\n      location: {\n        lat: 31,\n        lng: 34\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getLocationAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          location = _this$state.location,\n          forecast = _this$state.forecast,\n          address = _this$state.address;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, location && React.createElement(View, {\n        style: styles.banner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }\n      }, React.createElement(View, {\n        onClick: function onClick() {\n          return _this2.getLocationAsync();\n        },\n        style: styles.refresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, iconButtn), React.createElement(MyGetLocation, {\n        address: address,\n        location: location,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      })), forecast && React.createElement(ForecastList, {\n        forecast: forecast,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 20\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5FCFF'\n  },\n  banner: {\n    fontSize: 10,\n    textAlign: 'center',\n    padding: 10,\n    backgroundColor: '#80A4E4',\n    borderColor: '#80A4E4'\n  },\n  refresh: {\n    backgroundColor: '#80a4e4',\n    width: 46\n  }\n});","map":{"version":3,"sources":["C:/esti-projects/react-native-master/src/containers/App.jsx"],"names":["React","Component","MyGetLocation","ForecastList","Location","Permissions","autoBind","Icon","iconButtn","backgroundColor","App","getLocationAsync","askAsync","LOCATION","status","setState","errorMessage","getCurrentPositionAsync","accuracy","Accuracy","Highest","location","coords","latitude","longitude","url","fetch","then","response","json","data","forecast","lat","lng","address","city","name","console","log","state","styles","container","banner","refresh","StyleSheet","create","flex","fontSize","textAlign","padding","borderColor","width"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {StyleSheet, View, Text} from 'react-native';\r\nimport MyGetLocation from '../components/GetLocation';\r\nimport ForecastList from '../components/ForecastList';\r\n\r\nimport * as Location from 'expo-location';\r\nimport * as Permissions from 'expo-permissions';\r\n\r\n// import Geolocation from '@react-native-community/geolocation';\r\nimport autoBind from 'react-autobind';\r\n// import Geocoder from 'react-native-geocoding';  \r\n\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\n\r\nconst iconButtn = <Icon.Button name=\"refresh\" style={{backgroundColor:\"#80a4e4\"}}></Icon.Button>\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    autoBind(this);\r\n    this.state = {\r\n      location: {lat:31, lng:34},\r\n    };\r\n  }\r\n  componentDidMount(){\r\n    this.getLocationAsync();\r\n  }\r\n  getLocationAsync = async () => {\r\n    let { status } = await Permissions.askAsync(Permissions.LOCATION);\r\n    if (status !== 'granted') {\r\n      this.setState({\r\n        errorMessage: 'Permission to access location was denied',\r\n      });\r\n    }\r\n\r\n    let location = await Location.getCurrentPositionAsync({accuracy:Location.Accuracy.Highest});\r\n    const { latitude , longitude } = location.coords;\r\n    let url = 'https://api.openweathermap.org/data/2.5/forecast?lat=' + \r\n              latitude + '&lon=' + longitude + '&units=metric&appid=34026f1820a73bd0d6e38e6c9931d3e5';\r\n      fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n      this.setState({forecast: data, location: {lat: latitude,lng: longitude}, address:data.city.name});\r\n      console.log(\"222222222222222222222222222222222222\")\r\n      });\r\n  };\r\n  render() {\r\n    const {location, forecast, address} =this.state;\r\nreturn (\r\n      <View style={styles.container}>\r\n        {location&&<View style={styles.banner}>\r\n        <View  onClick={()=>this.getLocationAsync()} style={styles.refresh}>{iconButtn}</View>\r\n        <MyGetLocation address={address} location={location}/>\r\n        </View>}\r\n        {forecast&&<ForecastList forecast={forecast}/>}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n      flex: 1,\r\n      backgroundColor: '#F5FCFF',\r\n  },\r\n  banner: {\r\n      fontSize: 10,\r\n      textAlign: 'center',\r\n      padding: 10,\r\n      backgroundColor: '#80A4E4',\r\n      borderColor:'#80A4E4',\r\n  },\r\n  refresh:{\r\n    backgroundColor: '#80a4e4',\r\n    width: 46,\r\n  }\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module"}